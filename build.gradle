group 'com.booleanull'
version '1.5'

buildscript {
    ext.kotlin_version = '1.2.61'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'application'

mainClassName = 'ServerKt'

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile 'com.google.dagger:dagger:2.21'
    compile 'com.sparkjava:spark-core:2.7.2'
    compile 'com.google.code.gson:gson:2.8.2'
    compile 'org.hibernate:hibernate-core:5.2.10.Final'
    compile 'org.postgresql:postgresql:42.2.2.jre7'
    compile 'com.github.jknack:handlebars:4.1.2'
    compile 'javax.xml.bind:jaxb-api:2.2.11'
    compile 'com.sun.xml.bind:jaxb-core:2.2.11'
    compile 'com.sun.xml.bind:jaxb-impl:2.2.11'
    compile 'javax.activation:activation:1.1.1'
    compile 'io.jsonwebtoken:jjwt:0.5.1'
    compile 'javax.mail:mail:1.4.1'
    compile 'commons-codec:commons-codec:1.9'
    compile "org.jetbrains.kotlin:kotlin-reflect:1.2.41"

    kapt 'com.google.dagger:dagger-compiler:2.21'
    testImplementation 'junit:junit:4.12'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Spark-based REST',
                'Implementation-Version': version,
                'Main-Class': 'ServerKt'
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin/'
    test.java.srcDirs += 'src/test/kotlin/'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test {
    useJUnit()
}

task createProperties {
    doLast {
        def version = project.version.toString()
        def file = new File("$projectDir/src/main/resources/version.txt")
        file.write(version)
    }
}
